[{"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/index.js":"1","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/LandingPage.js":"2","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/Footer.js":"3","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/ExamplesNavbar.js":"4","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/Syntax.js":"5","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/parser.js":"6","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/OpenSheetDisplay.jsx":"7","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/evaluate.js":"8"},{"size":981,"mtime":1618111967266,"results":"9","hashOfConfig":"10"},{"size":31296,"mtime":1618130552651,"results":"11","hashOfConfig":"10"},{"size":1721,"mtime":1618132741559,"results":"12","hashOfConfig":"10"},{"size":16897,"mtime":1618132729080,"results":"13","hashOfConfig":"10"},{"size":4821,"mtime":1618114279110,"results":"14","hashOfConfig":"10"},{"size":6256,"mtime":1618113772133,"results":"15","hashOfConfig":"10"},{"size":4346,"mtime":1618114610462,"results":"16","hashOfConfig":"10"},{"size":11167,"mtime":1618113751346,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ofr3bj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/index.js",[],["38","39"],"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/LandingPage.js",["40","41","42","43","44","45","46","47","48"],"import React, { useRef, useState, Component } from 'react';\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  ListGroupItem,\n  ListGroup,\n  Container,\n  Row,\n  Col,\n  Modal,\n  Form,\n  FormGroup,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from 'reactstrap';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport CustomRule from './Syntax';\nimport OpenSheetDisplay from './OpenSheetDisplay';\nimport ExamplesNavbar from './ExamplesNavbar.js';\nimport Footer from './Footer.js';\nimport axios from 'axios';\nimport classnames from 'classnames';\n\nimport './assets/scss/blk-design-system-react.scss?v=1.2.0';\nimport './assets/demo/demo.css';\nimport './assets/css/nucleo-icons.css';\n\nimport { parse_and_evaluate } from './parser';\n\nclass LandingPage extends Component {\n  constructor(props) {\n    super(props);\n    console.log('Page Rerendered');\n    localStorage.removeItem('parsedResult');\n    this.rerender = this.rerender.bind(this);\n    this.state = {\n      sheetContent: '',\n      editorContent: '',\n      twoNewLine: false,\n      saveFileModal: false,\n      fileName: '',\n      fileNameFocus: false,\n      loggedIn: false,\n      openAlert: false,\n      alertMessage: '',\n      alertSeverity: '',\n      selectFileModal: false,\n      FileList: [],\n      selectedFileName: '',\n      showMusicSheet: true,\n    };\n  }\n\n  shouldComponentUpdate() {\n    if (localStorage.getItem('loginInfo')) {\n      console.log(JSON.parse(localStorage.getItem('loginInfo')));\n    }\n    return false;\n  }\n\n  rerender() {\n    console.log('rerender');\n    console.log(localStorage.getItem('loginInfo'));\n    if (localStorage.getItem('loginInfo')) {\n      this.setState({ loggedIn: true });\n    }\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    const customRule = new CustomRule();\n    this.refs.aceEditor.editor.getSession().setMode(customRule);\n    this.refs.aceEditor.editor.setAutoScrollEditorIntoView(true);\n    this.refs.aceEditor.editor.commands.on('afterExec', (eventData) => {\n      if (eventData.command.name === 'insertstring') {\n        if (eventData.args === '\\n') {\n          if (this.state.twoNewLine === true) {\n            this.setState({ twoNewLine: false }, () => {\n              this.refreshSheet();\n            });\n          } else {\n            this.setState({ twoNewLine: true });\n          }\n        } else {\n          this.setState({ twoNewLine: false });\n        }\n      }\n    });\n  }\n\n  editorOnChange(e) {\n    this.setState({ editorContent: e });\n  }\n\n  refreshSheet() {\n    console.log('Refreshing music sheet');\n    this.setState({ showMusicSheet: true });\n    try {\n      var parsed = parse_and_evaluate(this.state.editorContent);\n      console.log(parsed);\n      if (!parsed.startsWith('<?xml')) return;\n      // this.setState({ sheetContent: '' }, () => {\n      this.setState({ sheetContent: parsed }, () => {\n        console.log('updating page');\n        this.forceUpdate();\n      });\n      // });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  retrieveFileList() {\n    var email = JSON.parse(localStorage.getItem('loginInfo')).email;\n    console.log(JSON.parse(localStorage.getItem('loginInfo')));\n    axios\n      .get('http://localhost:8080/getFile', { params: { username: email, fileName: '' } })\n      .then((res) => {\n        console.log(res.data);\n        this.setState({ FileList: res.data.files, selectedFileName: res.data.files[0] }, () => this.forceUpdate());\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }\n\n  saveFile() {\n    console.log(this.state);\n    console.log(this.state.fileName);\n    console.log(this.state.editorContent);\n    var email = JSON.parse(localStorage.getItem('loginInfo')).email;\n    console.log(JSON.parse(localStorage.getItem('loginInfo')));\n\n    axios\n      .post('http://localhost:8080/save', { data: this.state.editorContent }, { params: { username: email, fileName: this.state.fileName } })\n      .then((res) => {\n        console.log(res.data);\n        this.setState({ saveFileModal: false, showMusicSheet: true });\n        this.forceUpdate();\n      })\n      .catch((err) => {\n        console.log(err.message);\n        this.setState({ showMusicSheet: true });\n      });\n  }\n\n  retrieveFile() {\n    console.log(this.state.selectedFileName);\n    var email = JSON.parse(localStorage.getItem('loginInfo')).email;\n    console.log(JSON.parse(localStorage.getItem('loginInfo')));\n    axios\n      .get('http://localhost:8080/getFile', { params: { username: email, fileName: this.state.selectedFileName } })\n      .then((res) => {\n        console.log(res.data);\n        this.setState({ editorContent: res.data, selectFileModal: false }, () => this.forceUpdate());\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }\n\n  changeSelected(e) {\n    this.setState({ selectedFileName: e.target.value });\n  }\n\n  openModal() {\n    this.setState({ saveFileModal: true, showMusicSheet: false });\n    console.log(this.state.saveFileModal);\n    this.forceUpdate();\n  }\n\n  render() {\n    const { editorContent, sheetContent, saveFileModal, fileName, fileNameFocus } = this.state;\n    return (\n      <>\n        <ExamplesNavbar render={this.rerender} />\n        <div className='wrapper'>\n          <div className='page-header'>\n            {/* <img alt='...' className='path' src={require('./assets/img/blob.png').default} /> */}\n            {/* <img alt='...' className='path2' src={require('./assets/img/path2.png').default} /> */}\n            <img alt='...' className='shapes triangle' src={require('./img/triunghiuri.png').default} />\n            {/* <img alt='...' className='shapes wave' src={require('./assets/img/waves.png').default} /> */}\n            {/* <img alt='...' className='shapes squares' src={require('./assets/img/patrat.png').default} /> */}\n            {/* <img alt='...' className='shapes circle' src={require('./assets/img/cercuri.png').default} /> */}\n            <div className='content-center'>\n              <Row className='row-grid justify-content-between align-items-center text-left'>\n                <Col lg='6' md='6'>\n                  <h1 className='text-white'>\n                    We make generating sheet music <br />\n                    <span className='text-white'>easy</span>\n                  </h1>\n                  <p className='text-white mb-3'>Place Holder</p>\n                  {/* <div className='btn-wrapper mb-3'>\n                  <p className='category text-success d-inline'>From 9.99%/mo</p>\n                  <Button className='btn-link' color='success' href='#pablo' onClick={(e) => e.preventDefault()} size='sm'>\n                    <i className='tim-icons icon-minimal-right' />\n                  </Button>\n                </div> */}\n                  <div className='btn-wrapper'>\n                    <div className='button-container'>\n                      <Button className='btn-icon btn-simple btn-round btn-neutral' color='default' href='https://github.com'>\n                        <i className='fab fa-github' />\n                      </Button>\n                    </div>\n                  </div>\n                </Col>\n                <Col lg='4' md='5'>\n                  <img alt='...' className='img-fluid' src={require('./img/etherum.png').default} />\n                </Col>\n              </Row>\n            </div>\n          </div>\n          <section className='section section-lg'>\n            <img alt='...' className='path' src={require('./assets/img/path4.png').default} />\n            {/* <img alt='...' className='path2' src={require('./assets/img/path5.png').default} /> */}\n            {/* <img alt='...' className='path3' src={require('./assets/img/path2.png').default} /> */}\n            <Container>\n              <Row className='justify-content-center'>\n                <Col lg='12'>\n                  <h1 className='text-center'>Your best benefit</h1>\n                  <Row className='row-grid justify-content-center'>\n                    <Col lg='3'>\n                      <div className='info'>\n                        <div className='icon icon-primary'>\n                          <i className='tim-icons icon-money-coins' />\n                        </div>\n                        <h4 className='info-title'>Low Commission</h4>\n                        <hr className='line-primary' />\n                        <p>Divide details about your work into parts. Write a few lines about each one. A paragraph describing a feature will.</p>\n                      </div>\n                    </Col>\n                    <Col lg='3'>\n                      <div className='info'>\n                        <div className='icon icon-warning'>\n                          <i className='tim-icons icon-chart-pie-36' />\n                        </div>\n                        <h4 className='info-title'>High Incomes</h4>\n                        <hr className='line-warning' />\n                        <p>\n                          Divide details about your product or agency work into parts. Write a few lines about each one. A paragraph describing\n                          feature will be a feature.\n                        </p>\n                      </div>\n                    </Col>\n                    <Col lg='3'>\n                      <div className='info'>\n                        <div className='icon icon-success'>\n                          <i className='tim-icons icon-single-02' />\n                        </div>\n                        <h4 className='info-title'>Verified People</h4>\n                        <hr className='line-success' />\n                        <p>\n                          Divide details about your product or agency work into parts. Write a few lines about each one. A paragraph describing be\n                          enough.\n                        </p>\n                      </div>\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          </section>\n          <section className='section section-lg section-coins'>\n            <img alt='...' className='path' src={require('./assets/img/path3.png').default} />\n            <div style={{ margin: '5rem' }}>\n              <Row>\n                <Col md='4'>\n                  <hr className='line-info' />\n                  <h1>\n                    {/* Choose the coin  */}\n                    Start generating <span className='text-info'>music sheet</span>\n                  </h1>\n                </Col>\n              </Row>\n              <Row>\n                <Col md='12' lg='6'>\n                  <Card className='card-coin card-plain'>\n                    {/* <CardHeader>\n                    <img alt='...' className='img-center img-fluid' src={require('./assets/img/bitcoin.png').default} />\n                  </CardHeader> */}\n                    <CardBody>\n                      <Row style={{ height: '75vh', padding: '1rem' }}>\n                        <AceEditor\n                          ref='aceEditor'\n                          mode='text'\n                          theme='monokai'\n                          width='100%'\n                          height='75vh'\n                          value={editorContent}\n                          onChange={(e) => this.editorOnChange(e)}\n                          on\n                          wrapEnabled\n                          editorProps={{ $blockScrolling: true }}\n                          setOptions={{\n                            enableSnippets: false,\n                            showLineNumbers: true,\n                            tabSize: 4,\n                            showPrintMargin: false,\n                            hScrollBarAlwaysVisible: true,\n                            vScrollBarAlwaysVisible: true,\n                          }}\n                          fontSize={18}\n                        />\n                      </Row>\n                    </CardBody>\n\n                    <CardFooter className='text-center'>\n                      <Button className='btn-simple' disabled={!this.state.loggedIn} color='primary' onClick={() => this.openModal()}>\n                        Save to Cloud\n                      </Button>\n                      <Button\n                        className='btn-simple'\n                        disabled={!this.state.loggedIn}\n                        color='primary'\n                        onClick={() => {\n                          this.retrieveFileList();\n                          this.setState({ selectFileModal: true });\n                          this.forceUpdate();\n                        }}>\n                        Select file from cloud\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                </Col>\n                <Col md='12' lg='6'>\n                  <Card className='card-coin card-plain'>\n                    {/* <CardHeader>\n                    <img alt='...' className='img-center img-fluid' src={require('./assets/img/etherum.png').default} />\n                  </CardHeader> */}\n                    <CardBody>\n                      <Row style={{ height: '75vh', padding: '1rem' }}>\n                        <div style={{ background: '#fff', width: '100%', height: '75vh', overflow: 'auto' }}>\n                          {/* <OpenSheetMusicDisplay file={'MuzioClementi_SonatinaOpus36No1_Part2.xml'} /> */}\n                          {this.state.showMusicSheet && <OpenSheetDisplay content={sheetContent} />}\n                        </div>\n                      </Row>\n                    </CardBody>\n                    <CardFooter className='text-center'>\n                      <Button className='btn-simple' color='success' onClick={() => this.refreshSheet()}>\n                        Refresh\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </section>\n          <Footer />\n        </div>\n        <Modal\n          modalClassName='modal-black'\n          isOpen={this.state.saveFileModal}\n          toggle={() => {\n            this.setState({ saveFileModal: false });\n            this.forceUpdate();\n          }}>\n          <div className='modal-header justify-content-center'>\n            <button\n              className='close'\n              onClick={() => {\n                this.setState({ saveFileModal: false });\n                this.forceUpdate();\n              }}>\n              <i className='tim-icons icon-simple-remove' />\n            </button>\n            <h4 className='title title-up'>Save file to cloud</h4>\n          </div>\n          <div className='modal-body'>\n            <Form role='form'>\n              <FormGroup className='mb-3'>\n                <InputGroup\n                  className={classnames('input-group-alternative', {\n                    'input-group-focus': this.state.fileNameFocus,\n                  })}>\n                  <InputGroupAddon addonType='prepend'>\n                    <InputGroupText>\n                      <i className='tim-icons icon-cloud-upload-94' />\n                    </InputGroupText>\n                  </InputGroupAddon>\n                  <Input\n                    placeholder='File Name'\n                    type='name'\n                    onFocus={(e) => {\n                      this.setState({ fileNameFocus: true });\n                      this.forceUpdate();\n                    }}\n                    onBlur={(e) => {\n                      this.setState({ fileNameFocus: false });\n                      this.forceUpdate();\n                    }}\n                    value={this.state.fileName}\n                    onChange={(e) => {\n                      this.setState({ fileName: e.target.value });\n                      this.forceUpdate();\n                    }}\n                  />\n                </InputGroup>\n              </FormGroup>\n              <div className='text-center'>\n                <Button className='my-4' color='primary' type='button' onClick={() => this.saveFile()}>\n                  Save\n                </Button>\n              </div>\n            </Form>\n          </div>\n        </Modal>\n        <Modal\n          modalClassName='modal-black'\n          isOpen={this.state.selectFileModal}\n          toggle={() => {\n            this.setState({ selectFileModal: false });\n            this.forceUpdate();\n          }}>\n          <div className='modal-header justify-content-center'>\n            <button\n              className='close'\n              onClick={() => {\n                this.setState({ selectFileModal: false });\n                this.forceUpdate();\n              }}>\n              <i className='tim-icons icon-simple-remove' />\n            </button>\n            <h4 className='title title-up'>Select file from cloud</h4>\n          </div>\n          <div className='modal-body'>\n            <Form role='form'>\n              <FormGroup className='mb-3'>\n                <InputGroup>\n                  <div style={{ width: '100%', padding: '1rem' }}>\n                    <select class='form-control' id='exampleFormControlSelect1' onChange={this.changeSelected.bind(this)}>\n                      {this.state.FileList.map((file) => (\n                        <option>{file}</option>\n                      ))}\n                    </select>\n                  </div>\n                </InputGroup>\n              </FormGroup>\n              <div className='text-center'>\n                <Button className='my-4' color='primary' type='button' onClick={() => this.retrieveFile()}>\n                  Retrieve\n                </Button>\n              </div>\n            </Form>\n          </div>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default LandingPage;\n\n// function LandingPageDeprecated() {\n//   const aceEditor = useRef();\n//   const [refreshDisplayState, setDisplayState] = useState(0);\n//   const [content, setContent] = useState('');\n//   React.useEffect(() => {\n//     console.log('useEffect called');\n//     localStorage.removeItem('parsedResult');\n//     document.body.classList.toggle('landing-page');\n//     const customRule = new CustomRule();\n//     const editor = aceEditor.current;\n//     editor.editor.getSession().setMode(customRule);\n//     editor.editor.setAutoScrollEditorIntoView(true);\n//     // Specify how to clean up after this effect:\n//     return function cleanup() {\n//       document.body.classList.toggle('landing-page');\n//     };\n//   }, []);\n\n//   var openSheetDisplayRefresh = () => {\n//     console.log(content);\n//     console.log('refresh');\n//     try {\n//       var parsed = parse_and_evaluate(content);\n//       localStorage.removeItem('parsedResult');\n//       localStorage.setItem('parsedResult', parsed);\n//       setDisplayState(refreshDisplayState + 1);\n//     } catch (error) {}\n//   };\n\n//   var onChange = (value) => {\n//     setContent(value);\n//   };\n\n//   return (\n//     <>\n//       <ExamplesNavbar />\n//       <div className='wrapper'>\n//         <div className='page-header'>\n//           <img alt='...' className='path' src={require('./assets/img/blob.png').default} />\n//           <img alt='...' className='path2' src={require('./assets/img/path2.png').default} />\n//           <img alt='...' className='shapes triangle' src={require('./assets/img/triunghiuri.png').default} />\n//           <img alt='...' className='shapes wave' src={require('./assets/img/waves.png').default} />\n//           <img alt='...' className='shapes squares' src={require('./assets/img/patrat.png').default} />\n//           <img alt='...' className='shapes circle' src={require('./assets/img/cercuri.png').default} />\n//           <div className='content-center'>\n//             <Row className='row-grid justify-content-between align-items-center text-left'>\n//               <Col lg='6' md='6'>\n//                 <h1 className='text-white'>\n//                   We make generating sheet music <br />\n//                   <span className='text-white'>easy</span>\n//                 </h1>\n//                 <p className='text-white mb-3'>Place Holder</p>\n//                 {/* <div className='btn-wrapper mb-3'>\n//                   <p className='category text-success d-inline'>From 9.99%/mo</p>\n//                   <Button className='btn-link' color='success' href='#pablo' onClick={(e) => e.preventDefault()} size='sm'>\n//                     <i className='tim-icons icon-minimal-right' />\n//                   </Button>\n//                 </div> */}\n//                 <div className='btn-wrapper'>\n//                   <div className='button-container'>\n//                     <Button className='btn-icon btn-simple btn-round btn-neutral' color='default' href='https://github.com'>\n//                       <i className='fab fa-github' />\n//                     </Button>\n//                   </div>\n//                 </div>\n//               </Col>\n//               <Col lg='4' md='5'>\n//                 <img alt='...' className='img-fluid' src={require('./assets/img/etherum.png').default} />\n//               </Col>\n//             </Row>\n//           </div>\n//         </div>\n//         <section className='section section-lg'>\n//           <img alt='...' className='path' src={require('./assets/img/path4.png').default} />\n//           {/* <img alt='...' className='path2' src={require('./assets/img/path5.png').default} /> */}\n//           {/* <img alt='...' className='path3' src={require('./assets/img/path2.png').default} /> */}\n//           <Container>\n//             <Row className='justify-content-center'>\n//               <Col lg='12'>\n//                 <h1 className='text-center'>Your best benefit</h1>\n//                 <Row className='row-grid justify-content-center'>\n//                   <Col lg='3'>\n//                     <div className='info'>\n//                       <div className='icon icon-primary'>\n//                         <i className='tim-icons icon-money-coins' />\n//                       </div>\n//                       <h4 className='info-title'>Low Commission</h4>\n//                       <hr className='line-primary' />\n//                       <p>Divide details about your work into parts. Write a few lines about each one. A paragraph describing a feature will.</p>\n//                     </div>\n//                   </Col>\n//                   <Col lg='3'>\n//                     <div className='info'>\n//                       <div className='icon icon-warning'>\n//                         <i className='tim-icons icon-chart-pie-36' />\n//                       </div>\n//                       <h4 className='info-title'>High Incomes</h4>\n//                       <hr className='line-warning' />\n//                       <p>\n//                         Divide details about your product or agency work into parts. Write a few lines about each one. A paragraph describing feature\n//                         will be a feature.\n//                       </p>\n//                     </div>\n//                   </Col>\n//                   <Col lg='3'>\n//                     <div className='info'>\n//                       <div className='icon icon-success'>\n//                         <i className='tim-icons icon-single-02' />\n//                       </div>\n//                       <h4 className='info-title'>Verified People</h4>\n//                       <hr className='line-success' />\n//                       <p>\n//                         Divide details about your product or agency work into parts. Write a few lines about each one. A paragraph describing be\n//                         enough.\n//                       </p>\n//                     </div>\n//                   </Col>\n//                 </Row>\n//               </Col>\n//             </Row>\n//           </Container>\n//         </section>\n//         <section className='section section-lg section-coins'>\n//           <img alt='...' className='path' src={require('./assets/img/path3.png').default} />\n//           <div style={{ margin: '5rem' }}>\n//             <Row>\n//               <Col md='4'>\n//                 <hr className='line-info' />\n//                 <h1>\n//                   {/* Choose the coin  */}\n//                   Start generating <span className='text-info'>music sheet</span>\n//                 </h1>\n//               </Col>\n//             </Row>\n//             <Row>\n//               <Col md='12' lg='6'>\n//                 <Card className='card-coin card-plain'>\n//                   {/* <CardHeader>\n//                     <img alt='...' className='img-center img-fluid' src={require('./assets/img/bitcoin.png').default} />\n//                   </CardHeader> */}\n//                   <CardBody>\n//                     <Row style={{ height: '75vh', padding: '1rem' }}>\n//                       <AceEditor\n//                         ref={aceEditor}\n//                         mode='text'\n//                         theme='monokai'\n//                         width='100%'\n//                         height='75vh'\n//                         onChange={onChange}\n//                         wrapEnabled\n//                         editorProps={{ $blockScrolling: true }}\n//                         setOptions={{\n//                           enableSnippets: false,\n//                           showLineNumbers: true,\n//                           tabSize: 4,\n//                           showPrintMargin: false,\n//                           hScrollBarAlwaysVisible: true,\n//                           vScrollBarAlwaysVisible: true,\n//                         }}\n//                         fontSize={18}\n//                       />\n//                     </Row>\n//                   </CardBody>\n//                   <CardFooter className='text-center'>\n//                     <Button className='btn-simple' color='primary' onClick={() => this.setState({})})}>\n//                       Save to Cloud\n//                     </Button>\n//                   </CardFooter>\n//                 </Card>\n//               </Col>\n//               <Col md='12' lg='6'>\n//                 <Card className='card-coin card-plain'>\n//                   {/* <CardHeader>\n//                     <img alt='...' className='img-center img-fluid' src={require('./assets/img/etherum.png').default} />\n//                   </CardHeader> */}\n//                   <CardBody>\n//                     <Row style={{ height: '75vh', padding: '1rem' }}>\n//                       <div style={{ background: '#fff', width: '100%', height: '75vh', overflow: 'auto' }}>\n//                         {/* <OpenSheetMusicDisplay file={'MuzioClementi_SonatinaOpus36No1_Part2.xml'} /> */}\n//                         <OpenSheetDisplay key={refreshDisplayState} file={'music.xml'} />\n//                       </div>\n//                     </Row>\n//                   </CardBody>\n//                   <CardFooter className='text-center'>\n//                     <Button className='btn-simple' color='success' onClick={openSheetDisplayRefresh}>\n//                       Refresh\n//                     </Button>\n//                   </CardFooter>\n//                 </Card>\n//               </Col>\n//             </Row>\n//           </div>\n//         </section>\n//         <Footer />\n//         <Modal modalClassName='modal-black' isOpen={saveFileModal} toggle={() => setCreateAccountModal(false)}>\n//           <div className='modal-header justify-content-center'>\n//             <button className='close' onClick={() => setCreateAccountModal(false)}>\n//               <i className='tim-icons icon-simple-remove' />\n//             </button>\n//             <h4 className='title title-up'>Create account with email</h4>\n//           </div>\n//           <div className='modal-body'>\n//             <Form role='form'>\n//               <FormGroup className='mb-3'>\n//                 <InputGroup\n//                   className={classnames('input-group-alternative', {\n//                     'input-group-focus': createAccountEmailFocus,\n//                   })}>\n//                   <InputGroupAddon addonType='prepend'>\n//                     <InputGroupText>\n//                       <i className='tim-icons icon-email-85' />\n//                     </InputGroupText>\n//                   </InputGroupAddon>\n//                   <Input\n//                     placeholder='Email'\n//                     type='email'\n//                     onFocus={(e) => setCreateAccountEmailFocus(true)}\n//                     onBlur={(e) => setCreateAccountEmailFocus(false)}\n//                     value={createAccountEmail}\n//                     onChange={(e) => setCreateAccountEmail(e.target.value)}\n//                   />\n//                 </InputGroup>\n//               </FormGroup>\n//               <FormGroup className={retypeCorrect ? 'has-danger mb-3' : 'mb-3'}>\n//                 <InputGroup\n//                   className={classnames('input-group-alternative', {\n//                     'input-group-focus': createAccountPasswordFocus,\n//                   })}>\n//                   <InputGroupAddon addonType='prepend'>\n//                     <InputGroupText>\n//                       <i className='tim-icons icon-key-25' />\n//                     </InputGroupText>\n//                   </InputGroupAddon>\n//                   <Input\n//                     placeholder='Password'\n//                     type='password'\n//                     onFocus={(e) => {\n//                       setCreateAccountPasswordFocus(true);\n//                       setRetypeCorrect(false);\n//                     }}\n//                     onBlur={(e) => setCreateAccountPasswordFocus(false)}\n//                     value={createAccountPassword}\n//                     onChange={(e) => setCreateAccountPassword(e.target.value)}\n//                   />\n//                 </InputGroup>\n//               </FormGroup>\n//               <FormGroup className={retypeCorrect ? 'has-danger mb-3' : 'mb-3'}>\n//                 <InputGroup\n//                   className={classnames('input-group-alternative', {\n//                     'input-group-focus': createAccountRetypePasswordFocus,\n//                   })}>\n//                   <InputGroupAddon addonType='prepend'>\n//                     <InputGroupText>\n//                       <i className='tim-icons icon-key-25' />\n//                     </InputGroupText>\n//                   </InputGroupAddon>\n//                   <Input\n//                     placeholder='Retype Password'\n//                     type='password'\n//                     onFocus={(e) => {\n//                       setCreateAccountRetypePasswordFocus(true);\n//                       setRetypeCorrect(false);\n//                     }}\n//                     onBlur={(e) => setCreateAccountRetypePasswordFocus(false)}\n//                     value={createAccountRetypePassword}\n//                     onChange={(e) => setCreateAccountRetypePassword(e.target.value)}\n//                   />\n//                 </InputGroup>\n//               </FormGroup>\n//               <div className='text-center'>\n//                 <Button className='my-4' color='primary' type='button' onClick={createAccount}>\n//                   Create Account\n//                 </Button>\n//               </div>\n//             </Form>\n//           </div>\n//         </Modal>\n//       </div>\n//     </>\n//   );\n// }\n","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/Footer.js",["49","50","51","52"],"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/ExamplesNavbar.js",["53","54"],"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/Syntax.js",[],"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/parser.js",["55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73"],"import { evaluate } from './evaluate';\n\nvar musicXML =\n  '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.1 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\"><score-partwise version=\"3.1\"><work><work-number>Unknown</work-number><work-title>Untitled</work-title></work><part-list></part-list></score-partwise>';\nvar xmlParser = new DOMParser();\nexport var xmlDoc = xmlParser.parseFromString(musicXML, 'application/xml');\n\nconsole.log(musicXML);\n\nfunction isTitle(c) {\n  return /title=[a-zA-Z0-9\\- ]+/.test(c);\n}\n\nfunction isAuthor(c) {\n  return /author=[a-zA-Z0-9\\- ]+/.test(c);\n}\n\nfunction isInstrumentHeader(c) {\n  return /[a-zA-Z0-9 \\-]+\\s*\\{/.test(c);\n}\n\nfunction isInstrumentFooter(c) {\n  return c == '}';\n}\n\nfunction isMeasure(c) {\n  return c[0] == '|';\n}\n\nfunction isMeasureMeta(c) {\n  return /\\$[TB]{1},\\s*[0-9]{1}\\/[0-9]{1},\\s*[ABCDEF]{1}[b#]{0,1}[mM]{1}\\$/.test(c);\n}\n\nfunction isFutureMeasureMeta(c) {\n  return /\\$[0-9]{1}\\/[0-9]{1},\\s*[ABCDEF]{1}[b#]{0,1}[mM]{1}\\$/.test(c);\n}\nfunction isNote(c) {\n  return /\\([ABCDEFGR]{1}[b#]{0,1},\\s*[0-9]+,\\s*[0-9]+,\\s*[a-z]+\\)/.test(c);\n}\n\nfunction isNoteHeader(c) {\n  return c == '(';\n}\n\nfunction isNoteFooter(c) {\n  return c == ')';\n}\n\nfunction isChordHeader(c) {\n  return c == '[';\n}\n\nfunction isChordFooter(c) {\n  return c == ']';\n}\n\n// function isTie(c) {\n//     return c == '-';\n// }\n\nfunction isWhitespace(c) {\n  return /^\\s+$/.test(c);\n}\n\nfunction isNewline(c) {\n  return c == '\\n';\n}\n\nfunction getMeasureData(input) {\n  var measureData = [];\n  var c = '';\n  var i = 1;\n  var advance = function () {\n    return (c = input[++i]);\n  };\n  var addToken = function (tokens, lex_obj) {\n    tokens.push(lex_obj);\n    return tokens;\n  };\n\n  var chords = [];\n  var isInChord = false;\n  var isInNote = false;\n\n  while (i < input.length) {\n    // console.log(c);\n    if (input[i] == ' ') {\n      i++;\n      continue;\n    }\n    c += input[i];\n    console.log(c);\n    // if (isWhitespace(c)) {\n    //     // advance();\n    //     if (!isInChord && !isInNote) {\n    //         console.log(\"hit\");\n    //         c = \"\";\n    //     }\n    //     console.log(c);\n    //     i++;\n    // } else\n\n    if (isMeasureMeta(c)) {\n      measureData = addToken(measureData, { type: 'measureMeta', value: c });\n      c = '';\n      i++;\n      console.log(c);\n    } else if (isFutureMeasureMeta(c)) {\n      measureData = addToken(measureData, { type: 'futureMeasureMeta', value: c });\n      c = '';\n      i++;\n      console.log(c);\n    } else if (isNote(c)) {\n      console.log('hit isnote');\n      if (!isInChord) {\n        measureData = addToken(measureData, { type: 'note', value: c });\n        // advance();\n        c = '';\n        i++;\n        console.log(c);\n      } else {\n        chords = addToken(chords, { type: 'note', value: /\\([ABCDEFGR]{1}[b#]{0,1},\\s*[0-9]+,\\s*[0-9]+,\\s*[a-z]+\\)/.exec(c)[0] });\n        // advance();\n        c = '';\n        i++;\n        isInNote = false;\n        console.log(c);\n      }\n    } else if (isChordHeader(c)) {\n      isInChord = true;\n      chords = [];\n      c = '';\n      i++;\n    } else if (isChordFooter(c)) {\n      isInChord = false;\n      measureData = addToken(measureData, { type: 'chord', value: chords });\n      c = '';\n      i++;\n    } else {\n      if (isNoteHeader(c)) {\n        console.log('hit noteheader');\n        isInNote = true;\n      }\n      if (isNoteFooter(c)) {\n        console.log('hit notefooter');\n        isInNote = false;\n      }\n      i++;\n    }\n  }\n\n  return measureData;\n}\n\nfunction lex(input) {\n  var tokens = [];\n  var c = '';\n  var i = 0;\n  var advance = function () {\n    return (c = input[++i]);\n  };\n\n  var addToken = function (tokens, lex_obj) {\n    tokens.push(lex_obj);\n    return tokens;\n  };\n\n  var input_split = input.split('\\n');\n  var measures = [];\n  var measureData = [];\n  var staveNum = 1;\n  var measureNum = 0;\n  var instrument = '';\n  var isInInstrument = false;\n\n  for (var i = 0; i < input_split.length; i++) {\n    var line = input_split[i].trim();\n    if (isTitle(line)) {\n      tokens = addToken(tokens, { type: 'title', value: line });\n    } else if (isAuthor(line)) {\n      tokens = addToken(tokens, { type: 'author', value: line });\n    } else {\n      if (isInstrumentHeader(line)) {\n        isInInstrument = true;\n        measures = [];\n        measureNum = 1;\n        staveNum = 0;\n        instrument = /[a-zA-Z]+/.exec(line)[0];\n      } else {\n        if (isMeasure(line)) {\n          staveNum++;\n          measureData = getMeasureData(line);\n          measures = addToken(measures, { type: 'measure', value: measureData, staveNum: staveNum, measureNum: measureNum });\n        } else if (line == '' && isInInstrument == true) {\n          console.log('hit');\n          staveNum = 0;\n          measureNum++;\n        } else if (isInstrumentFooter(line)) {\n          isInInstrument = false;\n          tokens = addToken(tokens, { type: 'instrument', instrument: instrument, value: measures });\n        }\n      }\n    }\n  }\n\n  return tokens;\n}\n\nvar glob_tokens;\n\nexport function parse_and_evaluate(str) {\n  musicXML =\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.1 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\"><score-partwise version=\"3.1\"><work><work-number>Unknown</work-number><work-title>Untitled</work-title></work><part-list></part-list></score-partwise>';\n  xmlParser = new DOMParser();\n  xmlDoc = xmlParser.parseFromString(musicXML, 'application/xml');\n  // let text = document.getElementById('music_markdown_textarea').value;\n  let tokens = lex(str);\n  // glob_tokens = tokens;\n  console.log(tokens);\n  xmlDoc = evaluate(tokens);\n  let xmlserializer = new XMLSerializer();\n  return xmlserializer.serializeToString(xmlDoc);\n  // return tokens;\n}\n\n// console.log(isMeasureMeta(\"$T, 4/4, Am$\"));\n\n/*\ntitle=me\nauthor=me\npiano {\n|$T,4/4,Am$ [(A,3,3),(C,3,3),(E,3,3)] (Db,4,3) (Eb,3,3)[(A,3,3),(C,3,3),(E,3,3)]|\n|$T,4/4,Am$ [(A,3,3),(C,3,3),(E,3,3)] (Db,4,3) (Eb,3,3)[(A,3,3),(C,3,3),(E,3,3)]|\n\n|$T,4/4,Am$ [(A,3,3),(C,3,3),(E,3,3)] (Db,4,3) (Eb,3,3)[(A,3,3),(C,3,3),(E,3,3)]|\n|$T,4/4,Am$ [(A,3,3),(C,3,3),(E,3,3)] (Db,4,3) (Eb,3,3)[(A,3,3),(C,3,3),(E,3,3)]|\n}\n*/\n","/Users/chen2886/Desktop/MusicMarkdown/Composer/src/OpenSheetDisplay.jsx",[],"/Users/chen2886/Desktop/MusicMarkdown/Composer/src/evaluate.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import { xmlDoc } from './parser';\n\nvar getFifths = {\n  CM: 0,\n  Am: 0,\n  GM: 1,\n  Em: 1,\n  DM: 2,\n  Bm: 2,\n  AM: 3,\n  'F#m': 3,\n  EM: 4,\n  'C#M': 4,\n  BM: 5,\n  'G#m': 5,\n  'F#M': 6,\n  'D#m': 6,\n  'C#M': 7,\n  'A#m': 7,\n  FM: -1,\n  Dm: -1,\n  BbM: -2,\n  Gm: -2,\n  EbM: -3,\n  Cm: -3,\n  AbM: -4,\n  Fm: -4,\n  DbM: -5,\n  Bbm: -5,\n  GbM: -6,\n  Ebm: -6,\n  CbM: -7,\n  Abm: -7,\n};\n\nvar maxStave = 0;\nvar lastMeasureNumber = 0;\n\nvar initializedAttributes = false;\nvar lastTimeSig = '';\nvar lastKey = '';\n\nexport function evaluate(lexedInfo) {\n  lastMeasureNumber = 0;\n  function handleNote(note, isChord, staffNo) {\n    let noteElem = xmlDoc.createElement('note');\n\n    let staffElem = xmlDoc.createElement('staff');\n    staffElem.innerHTML = staffNo;\n\n    noteElem.appendChild(staffElem);\n\n    let noteData = note.substring(1, note.length - 1).split(',');\n    console.log(noteData);\n\n    let markdownNote = noteData[0].substring(0, 1);\n    let isRest = false;\n    if (markdownNote === 'R') {\n      isRest = true;\n    }\n    let mardownAlter = noteData[0].substring(1, 2);\n    let markdownOctave = noteData[1];\n    let markdownDuration = noteData[2];\n    let markdownType = noteData[3];\n\n    let pitchElem = xmlDoc.createElement('pitch');\n    let stepElem = xmlDoc.createElement('step');\n    let alterElem = xmlDoc.createElement('alter');\n    let octaveElem = xmlDoc.createElement('octave');\n    let typeElem = xmlDoc.createElement('type');\n    let durationElem = xmlDoc.createElement('duration');\n    if (isRest) {\n      var restElem = xmlDoc.createElement('rest');\n      restElem.setAttribute('measure', 'yes');\n    }\n\n    stepElem.innerHTML = markdownNote;\n    if (mardownAlter == 'b') {\n      alterElem.innerHTML = '-1';\n    } else if (mardownAlter == '#') {\n      alterElem.innerHTML = '1';\n    }\n\n    octaveElem.innerHTML = markdownOctave;\n    durationElem.innerHTML = markdownDuration;\n    typeElem.innerHTML = markdownType;\n    // typeElem.innerHTML = \"quarter\";\n\n    pitchElem.appendChild(stepElem);\n    pitchElem.appendChild(alterElem);\n    pitchElem.appendChild(octaveElem);\n\n    if (isRest) {\n      noteElem.appendChild(restElem);\n      noteElem.appendChild(durationElem);\n      return noteElem;\n    }\n    noteElem.appendChild(pitchElem);\n    noteElem.appendChild(durationElem);\n    noteElem.appendChild(typeElem);\n\n    if (isChord) {\n      let chordElem = xmlDoc.createElement('chord');\n      noteElem.appendChild(chordElem);\n    }\n\n    return noteElem;\n  }\n\n  function handleMeasure(measure) {\n    // let tempString = \"\";\n    let measureNode = '';\n    if (measure.measureNum == lastMeasureNumber) {\n      console.log('hit eq ' + lastMeasureNumber);\n      let measureNodes = xmlDoc.getElementsByTagName('measure');\n      console.log(measureNodes.length);\n      for (let i = 0; i < measureNodes.length; i++) {\n        console.log(measureNodes[i].getAttribute('number') + ' ' + lastMeasureNumber);\n        if (measureNodes[i].getAttribute('number') == lastMeasureNumber) {\n          measureNode = measureNodes[i];\n          break;\n        }\n      }\n    } else {\n      console.log('hit not eq');\n      measureNode = xmlDoc.createElement('measure');\n      measureNode.setAttribute('number', measure.measureNum);\n    }\n\n    let measureLexElems = measure.value;\n    // let staveElem = xmlDoc.createElement(\"staves\");\n    for (let i = 0; i < measureLexElems.length; i++) {\n      var measureLexElem = measureLexElems[i];\n      if (measure.measureNum == 1 && i == 0 && measureLexElem.type != 'measureMeta') {\n        console.log(measure.measureNum, measureLexElem.type);\n        throw 'Syntax Error';\n      }\n      if (measureLexElem.type == 'measureMeta') {\n        let attributesElem = '';\n        let staveElem = '';\n        // will only be one element\n        console.log(measureNode);\n        let attributesElems = measureNode.getElementsByTagName('attributes');\n        if (attributesElems.length != 0) {\n          attributesElem = attributesElems[0];\n          staveElem = attributesElem.getElementsByTagName('staves')[0];\n        } else {\n          attributesElem = xmlDoc.createElement('attributes');\n          staveElem = xmlDoc.createElement('staves');\n        }\n\n        console.log(attributesElem);\n        let measureMeta = measureLexElem.value.substring(1, measureLexElem.value.length - 1).split(',');\n\n        let markdownClef = measureMeta[0];\n        let markdownTimeSig = measureMeta[1];\n        let markdownKeySig = measureMeta[2];\n\n        let xmlClef = '';\n        if (markdownClef == 'T') {\n          xmlClef = 'G';\n        } else if (markdownClef == 'B') {\n          xmlClef = 'F';\n        } else {\n          throw 'Syntax Error';\n        }\n        console.log(measure + ' ' + measure.staveNum);\n        let clefElem = xmlDoc.createElement('clef');\n        if (measure.staveNum > maxStave) {\n          staveElem.innerHTML = measure.staveNum;\n        }\n        if (attributesElem.getElementsByTagName('staves').length == 0) {\n          attributesElem.appendChild(staveElem);\n        }\n\n        clefElem.setAttribute('number', measure.staveNum);\n        let clefSignElem = xmlDoc.createElement('sign');\n        clefSignElem.innerHTML = xmlClef;\n        let clefLineElem = xmlDoc.createElement('line');\n        clefLineElem.innerHTML = '2';\n        clefElem.appendChild(clefSignElem);\n        clefElem.appendChild(clefLineElem);\n        attributesElem.appendChild(clefElem);\n\n        if (attributesElem.getElementsByTagName('divisions').length == 0) {\n          let divisionsElem = xmlDoc.createElement('divisions');\n          divisionsElem.innerHTML = '24';\n          attributesElem.appendChild(divisionsElem);\n        }\n\n        if (attributesElem.getElementsByTagName('time').length == 0) {\n          let timeSigElem = xmlDoc.createElement('time');\n          let beatsElem = xmlDoc.createElement('beats');\n          let beatsTypeElem = xmlDoc.createElement('beats-type');\n\n          let beatsLexData = markdownTimeSig.split('/');\n\n          beatsElem.innerHTML = beatsLexData[0];\n          beatsTypeElem.innerHTML = beatsLexData[1];\n\n          timeSigElem.appendChild(beatsElem);\n          timeSigElem.appendChild(beatsTypeElem);\n          attributesElem.appendChild(timeSigElem);\n        }\n\n        if (attributesElem.getElementsByTagName('key').length == 0) {\n          let keySigElem = xmlDoc.createElement('key');\n          let fifthsElem = xmlDoc.createElement('fifths');\n\n          fifthsElem.innerHTML = getFifths[markdownKeySig];\n\n          keySigElem.appendChild(fifthsElem);\n          attributesElem.appendChild(keySigElem);\n        }\n\n        if (measureNode.getElementsByTagName('attributes').length == 0) {\n          measureNode.insertBefore(attributesElem, measureNode.firstChild);\n        }\n      } else if (measureLexElem.type == 'futureMeasureMeta') {\n        let attributesElem = '';\n        // will only be one element\n        console.log(measureNode);\n        let attributesElems = measureNode.getElementsByTagName('attributes');\n        if (attributesElems.length != 0) {\n          attributesElem = attributesElems[0];\n        } else {\n          attributesElem = xmlDoc.createElement('attributes');\n        }\n\n        let measureMeta = measureLexElem.value.substring(1, measureLexElem.value.length - 1).split(',');\n\n        let markdownTimeSig = measureMeta[0];\n        let markdownKeySig = measureMeta[1];\n\n        if (attributesElem.getElementsByTagName('time').length == 0) {\n          let timeSigElem = xmlDoc.createElement('time');\n          let beatsElem = xmlDoc.createElement('beats');\n          let beatsTypeElem = xmlDoc.createElement('beats-type');\n\n          let beatsLexData = markdownTimeSig.split('/');\n\n          beatsElem.innerHTML = beatsLexData[0];\n          beatsTypeElem.innerHTML = beatsLexData[1];\n\n          timeSigElem.appendChild(beatsElem);\n          timeSigElem.appendChild(beatsTypeElem);\n          attributesElem.appendChild(timeSigElem);\n        }\n\n        if (attributesElem.getElementsByTagName('key').length == 0) {\n          let keySigElem = xmlDoc.createElement('key');\n          let fifthsElem = xmlDoc.createElement('fifths');\n\n          fifthsElem.innerHTML = getFifths[markdownKeySig];\n\n          keySigElem.appendChild(fifthsElem);\n          attributesElem.appendChild(keySigElem);\n        }\n        if (measureNode.getElementsByTagName('attributes').length == 0) {\n          measureNode.insertBefore(attributesElem, measureNode.firstChild);\n        }\n      } else if (measureLexElem.type == 'chord') {\n        let chordNotes = measureLexElem.value;\n        console.log(chordNotes);\n        for (let j = 0; j < chordNotes.length; j++) {\n          let firstNote = j == 0;\n          let noteXML = handleNote(chordNotes[j].value, !firstNote, measure.staveNum);\n          measureNode.appendChild(noteXML);\n        }\n      } else if (measureLexElem.type == 'note') {\n        let noteXML = handleNote(measureLexElem.value, false, measure.staveNum);\n        measureNode.appendChild(noteXML);\n      }\n    }\n    return measureNode;\n  }\n  function handleInstrument(instrument, partNum) {\n    maxStave = 0;\n    let tempString = '';\n    let type = instrument.instrument;\n\n    let partList = xmlDoc.getElementsByTagName('part-list')[0];\n\n    let scorePart = xmlDoc.createElement('score-part');\n    scorePart.id = 'P' + partNum;\n\n    let partName = xmlDoc.createElement('part-name');\n    partName.innerHTML = type;\n\n    scorePart.appendChild(partName);\n    partList.appendChild(scorePart);\n\n    let partMeasures = xmlDoc.createElement('part');\n    partMeasures.id = scorePart.id;\n    xmlDoc.getElementsByTagName('score-partwise')[0].appendChild(partMeasures);\n\n    let measures = instrument.value;\n    for (let i = 0; i < measures.length; i++) {\n      if (measures[i].measureNum == 2) {\n        initializedAttributes = true;\n      }\n      let measureXML = handleMeasure(measures[i], false);\n      if (measures[i].measureNum != lastMeasureNumber) {\n        console.log('appended');\n        partMeasures.appendChild(measureXML);\n        lastMeasureNumber = measures[i].measureNum;\n      }\n    }\n\n    return partMeasures;\n  }\n\n  var instrumentNum = 0;\n  for (var i = 0; i < lexedInfo.length; i++) {\n    if (lexedInfo[i].type === 'author') {\n      // curString += \"<work-number>\" + lexedInfo[i].value + \"</work-title>\";\n\n      xmlDoc.getElementsByTagName('work-number')[0].innerHTML = lexedInfo[i].value.substring(7, lexedInfo[i].value.length);\n    } else if (lexedInfo[i].type === 'title') {\n      // curString += \"<work-title>\" + lexedInfo[i].value + \"</work-title>\";\n      xmlDoc.getElementsByTagName('work-title')[0].innerHTML = lexedInfo[i].value.substring(6, lexedInfo[i].value.length);\n    } else {\n      instrumentNum++;\n      lastMeasureNumber = 0;\n      // type is instrument\n      // if (curString === \"<work>\") {\n      //     // no title/author provided\n      //     curString += \"<work-title>New Song</work-title></work>\";\n      // }\n      // for (let j = 0; j < lexedInfo[i].value.length; j++) {\n      let instrumentXML = handleInstrument(lexedInfo[i], instrumentNum);\n      xmlDoc.getElementsByTagName('score-partwise')[0].appendChild(instrumentXML);\n      // }\n    }\n  }\n\n  return xmlDoc;\n}\n",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":23},{"ruleId":"111","severity":1,"message":"115","line":1,"column":25,"nodeType":"113","messageId":"114","endLine":1,"endColumn":33},{"ruleId":"111","severity":1,"message":"116","line":5,"column":3,"nodeType":"113","messageId":"114","endLine":5,"endColumn":13},{"ruleId":"111","severity":1,"message":"117","line":8,"column":3,"nodeType":"113","messageId":"114","endLine":8,"endColumn":12},{"ruleId":"111","severity":1,"message":"118","line":9,"column":3,"nodeType":"113","messageId":"114","endLine":9,"endColumn":16},{"ruleId":"111","severity":1,"message":"119","line":10,"column":3,"nodeType":"113","messageId":"114","endLine":10,"endColumn":12},{"ruleId":"111","severity":1,"message":"120","line":180,"column":42,"nodeType":"113","messageId":"114","endLine":180,"endColumn":55},{"ruleId":"111","severity":1,"message":"121","line":180,"column":57,"nodeType":"113","messageId":"114","endLine":180,"endColumn":65},{"ruleId":"111","severity":1,"message":"122","line":180,"column":67,"nodeType":"113","messageId":"114","endLine":180,"endColumn":80},{"ruleId":"111","severity":1,"message":"123","line":19,"column":10,"nodeType":"113","messageId":"114","endLine":19,"endColumn":14},{"ruleId":"111","severity":1,"message":"124","line":21,"column":18,"nodeType":"113","messageId":"114","endLine":21,"endColumn":25},{"ruleId":"111","severity":1,"message":"125","line":21,"column":27,"nodeType":"113","messageId":"114","endLine":21,"endColumn":34},{"ruleId":"111","severity":1,"message":"126","line":21,"column":36,"nodeType":"113","messageId":"114","endLine":21,"endColumn":39},{"ruleId":"111","severity":1,"message":"127","line":62,"column":10,"nodeType":"113","messageId":"114","endLine":62,"endColumn":19},{"ruleId":"128","severity":1,"message":"129","line":87,"column":6,"nodeType":"130","endLine":87,"endColumn":8,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":19,"column":22,"nodeType":"134","messageId":"135","endLine":19,"endColumn":23,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":23,"column":12,"nodeType":"139","messageId":"140","endLine":23,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":27,"column":15,"nodeType":"139","messageId":"140","endLine":27,"endColumn":17},{"ruleId":"137","severity":1,"message":"138","line":42,"column":12,"nodeType":"139","messageId":"140","endLine":42,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":46,"column":12,"nodeType":"139","messageId":"140","endLine":46,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":50,"column":12,"nodeType":"139","messageId":"140","endLine":50,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":54,"column":12,"nodeType":"139","messageId":"140","endLine":54,"endColumn":14},{"ruleId":"111","severity":1,"message":"141","line":61,"column":10,"nodeType":"113","messageId":"114","endLine":61,"endColumn":22},{"ruleId":"111","severity":1,"message":"142","line":65,"column":10,"nodeType":"113","messageId":"114","endLine":65,"endColumn":19},{"ruleId":"137","severity":1,"message":"138","line":66,"column":12,"nodeType":"139","messageId":"140","endLine":66,"endColumn":14},{"ruleId":"111","severity":1,"message":"143","line":73,"column":7,"nodeType":"113","messageId":"114","endLine":73,"endColumn":14},{"ruleId":"137","severity":1,"message":"138","line":87,"column":18,"nodeType":"139","messageId":"140","endLine":87,"endColumn":20},{"ruleId":"111","severity":1,"message":"144","line":146,"column":9,"nodeType":"113","messageId":"114","endLine":146,"endColumn":17},{"ruleId":"111","severity":1,"message":"143","line":159,"column":7,"nodeType":"113","messageId":"114","endLine":159,"endColumn":14},{"ruleId":"111","severity":1,"message":"145","line":160,"column":13,"nodeType":"113","messageId":"114","endLine":160,"endColumn":14},{"ruleId":"146","severity":1,"message":"147","line":176,"column":12,"nodeType":"113","messageId":"148","endLine":176,"endColumn":13},{"ruleId":"137","severity":1,"message":"138","line":194,"column":25,"nodeType":"139","messageId":"140","endLine":194,"endColumn":27},{"ruleId":"137","severity":1,"message":"138","line":194,"column":49,"nodeType":"139","messageId":"140","endLine":194,"endColumn":51},{"ruleId":"111","severity":1,"message":"149","line":209,"column":5,"nodeType":"113","messageId":"114","endLine":209,"endColumn":16},{"ruleId":"150","severity":1,"message":"151","line":18,"column":3,"nodeType":"152","messageId":"140","endLine":18,"endColumn":8},{"ruleId":"111","severity":1,"message":"153","line":40,"column":5,"nodeType":"113","messageId":"114","endLine":40,"endColumn":16},{"ruleId":"111","severity":1,"message":"154","line":41,"column":5,"nodeType":"113","messageId":"114","endLine":41,"endColumn":12},{"ruleId":"137","severity":1,"message":"138","line":78,"column":22,"nodeType":"139","messageId":"140","endLine":78,"endColumn":24},{"ruleId":"137","severity":1,"message":"138","line":80,"column":29,"nodeType":"139","messageId":"140","endLine":80,"endColumn":31},{"ruleId":"137","severity":1,"message":"138","line":113,"column":28,"nodeType":"139","messageId":"140","endLine":113,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":119,"column":52,"nodeType":"139","messageId":"140","endLine":119,"endColumn":54},{"ruleId":"137","severity":1,"message":"138","line":134,"column":30,"nodeType":"139","messageId":"140","endLine":134,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":134,"column":40,"nodeType":"139","messageId":"140","endLine":134,"endColumn":42},{"ruleId":"137","severity":1,"message":"155","line":134,"column":68,"nodeType":"139","messageId":"140","endLine":134,"endColumn":70},{"ruleId":"156","severity":1,"message":"157","line":136,"column":9,"nodeType":"158","messageId":"159","endLine":136,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":138,"column":31,"nodeType":"139","messageId":"140","endLine":138,"endColumn":33},{"ruleId":"137","severity":1,"message":"155","line":144,"column":36,"nodeType":"139","messageId":"140","endLine":144,"endColumn":38},{"ruleId":"137","severity":1,"message":"138","line":160,"column":26,"nodeType":"139","messageId":"140","endLine":160,"endColumn":28},{"ruleId":"137","severity":1,"message":"138","line":162,"column":33,"nodeType":"139","messageId":"140","endLine":162,"endColumn":35},{"ruleId":"156","severity":1,"message":"157","line":165,"column":11,"nodeType":"158","messageId":"159","endLine":165,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":172,"column":66,"nodeType":"139","messageId":"140","endLine":172,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":185,"column":69,"nodeType":"139","messageId":"140","endLine":185,"endColumn":71},{"ruleId":"137","severity":1,"message":"138","line":191,"column":64,"nodeType":"139","messageId":"140","endLine":191,"endColumn":66},{"ruleId":"137","severity":1,"message":"138","line":206,"column":63,"nodeType":"139","messageId":"140","endLine":206,"endColumn":65},{"ruleId":"137","severity":1,"message":"138","line":216,"column":67,"nodeType":"139","messageId":"140","endLine":216,"endColumn":69},{"ruleId":"137","severity":1,"message":"138","line":219,"column":38,"nodeType":"139","messageId":"140","endLine":219,"endColumn":40},{"ruleId":"137","severity":1,"message":"155","line":224,"column":36,"nodeType":"139","messageId":"140","endLine":224,"endColumn":38},{"ruleId":"137","severity":1,"message":"138","line":235,"column":64,"nodeType":"139","messageId":"140","endLine":235,"endColumn":66},{"ruleId":"137","severity":1,"message":"138","line":250,"column":63,"nodeType":"139","messageId":"140","endLine":250,"endColumn":65},{"ruleId":"137","severity":1,"message":"138","line":259,"column":67,"nodeType":"139","messageId":"140","endLine":259,"endColumn":69},{"ruleId":"137","severity":1,"message":"138","line":262,"column":38,"nodeType":"139","messageId":"140","endLine":262,"endColumn":40},{"ruleId":"137","severity":1,"message":"138","line":266,"column":29,"nodeType":"139","messageId":"140","endLine":266,"endColumn":31},{"ruleId":"137","severity":1,"message":"138","line":270,"column":38,"nodeType":"139","messageId":"140","endLine":270,"endColumn":40},{"ruleId":"111","severity":1,"message":"160","line":279,"column":9,"nodeType":"113","messageId":"114","endLine":279,"endColumn":19},{"ruleId":"137","severity":1,"message":"138","line":299,"column":34,"nodeType":"139","messageId":"140","endLine":299,"endColumn":36},{"ruleId":"111","severity":1,"message":"161","line":300,"column":9,"nodeType":"113","messageId":"114","endLine":300,"endColumn":30},{"ruleId":"137","severity":1,"message":"155","line":303,"column":34,"nodeType":"139","messageId":"140","endLine":303,"endColumn":36},"no-native-reassign",["162"],"no-negated-in-lhs",["163"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'CardHeader' is defined but never used.","'CardTitle' is defined but never used.","'ListGroupItem' is defined but never used.","'ListGroup' is defined but never used.","'saveFileModal' is assigned a value but never used.","'fileName' is assigned a value but never used.","'fileNameFocus' is assigned a value but never used.","'Link' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Nav' is defined but never used.","'loginInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["164"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["165","166"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isWhitespace' is defined but never used.","'isNewline' is defined but never used.","'advance' is assigned a value but never used.","'isInNote' is assigned a value but never used.","'c' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'glob_tokens' is defined but never used.","no-dupe-keys","Duplicate key 'C#M'.","ObjectExpression","'lastTimeSig' is assigned a value but never used.","'lastKey' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'tempString' is assigned a value but never used.","'initializedAttributes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"messageId":"169","fix":"170","desc":"171"},{"messageId":"172","fix":"173","desc":"174"},"Update the dependencies array to be: [props]",{"range":"175","text":"176"},"removeEscape",{"range":"177","text":"178"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"179","text":"180"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[2978,2980],"[props]",[711,712],"",[711,711],"\\"]